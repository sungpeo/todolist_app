{"version":3,"sources":["serviceWorker.js","TodoListApp.js","index.js"],"names":["Boolean","window","location","hostname","match","TodoListApp","state","items","_this2","this","react_default","a","createElement","className","TodoListApp_TodoListHeader","addItem","e","addTask","TodoListApp_TodoItems","entry","console","log","preventDefault","itemArray","inputTask","document","getElementById","value","push","task","key","Date","now","setState","Component","TodoListHeader","onSubmit","props","id","placeholder","type","TodoItems","listItem","map","item","ReactDOM","render","src_TodoListApp_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kGCkBSC,oNA/BXC,MAAQ,CAACC,MAAO,4EAEP,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACE,EAAD,CAAgBC,QAAS,SAACC,GAAD,OAAKR,EAAKS,QAAQD,MAC3CN,EAAAC,EAAAC,cAACM,EAAD,CAAWC,MAAOV,KAAKH,MAAMC,yCAKjCS,GACJI,QAAQC,IAAI,YACZL,EAAEM,iBAEF,IAAIC,EAAYd,KAAKH,MAAMC,MACvBiB,EAAYC,SAASC,eAAe,aAAaC,MACrDJ,EAAUK,KAAK,CACXC,KAAML,EACNM,IAAKC,KAAKC,QAGdP,SAASC,eAAe,aAAaC,MAAQ,GAE7ClB,KAAKwB,SAAS,CACV1B,MAAOgB,WA3BOW,cAoCpBC,mLAGE,OACIzB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAiBuB,SAAU3B,KAAK4B,MAAMtB,SAClDL,EAAAC,EAAAC,cAAA,SAAO0B,GAAG,YAAYC,YAAY,eAClC7B,EAAAC,EAAAC,cAAA,UAAQ4B,KAAK,UAAb,eANaN,aAYvBO,mLAIE,IAAIC,EAAWjC,KAAK4B,MAAMlB,MAAMwB,IAAI,SAACC,GACjC,OAAQlC,EAAAC,EAAAC,cAAA,MAAIkB,IAAKc,EAAKd,KAAMc,EAAKf,QAErC,OACInB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACT6B,UATOR,aCrCxBW,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAAiBtB,SAASC,eAAe,gBF+GnD,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9e7d1394.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport './TodoListApp.css';\r\n\r\nclass TodoListApp extends Component {\r\n\r\n    state = {items: []}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"TodoListApp\">\r\n                <TodoListHeader addItem={(e)=>this.addTask(e)}></TodoListHeader>\r\n                <TodoItems entry={this.state.items}></TodoItems>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    addTask(e) {\r\n        console.log(\"add task\");\r\n        e.preventDefault();\r\n\r\n        var itemArray = this.state.items;\r\n        var inputTask = document.getElementById(\"inputTask\").value;\r\n        itemArray.push({\r\n            task: inputTask,\r\n            key: Date.now()\r\n        })\r\n\r\n        document.getElementById(\"inputTask\").value = \"\";\r\n\r\n        this.setState({\r\n            items: itemArray\r\n        });\r\n        \r\n    }\r\n}\r\n\r\nexport default TodoListApp;\r\n\r\n\r\nclass TodoListHeader extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"TodoListHeader\" onSubmit={this.props.addItem}>\r\n                <input id=\"inputTask\" placeholder=\"enter task\"></input>\r\n                <button type=\"submit\">add</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nclass TodoItems extends Component {\r\n    //{this.props.entry}\r\n\r\n    render() {\r\n        var listItem = this.props.entry.map((item)=>{\r\n            return (<li key={item.key}>{item.task}</li>)\r\n        })\r\n        return (\r\n            <ul className=\"TodoItems\">\r\n                {listItem}\r\n            </ul>\r\n            );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n// import './index.css';\n// import App from './App';\n\n//import ClickSample from './ClickSample';\n\nimport TodoListApp from './TodoListApp';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n//ReactDOM.render(<ClickSample />, document.getElementById('clicksample'));\n\nReactDOM.render(<TodoListApp />, document.getElementById('todolistapp'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}